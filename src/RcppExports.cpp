// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PELTCpp
std::vector<int> PELTCpp(const arma::mat& tsMat, const double penalty, const int minSize, const int jump, std::string costFunc, bool addSmallDiag, double epsilon, int pVAR);
RcppExport SEXP _rupturesRcpp_PELTCpp(SEXP tsMatSEXP, SEXP penaltySEXP, SEXP minSizeSEXP, SEXP jumpSEXP, SEXP costFuncSEXP, SEXP addSmallDiagSEXP, SEXP epsilonSEXP, SEXP pVARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type tsMat(tsMatSEXP);
    Rcpp::traits::input_parameter< const double >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< const int >::type minSize(minSizeSEXP);
    Rcpp::traits::input_parameter< const int >::type jump(jumpSEXP);
    Rcpp::traits::input_parameter< std::string >::type costFunc(costFuncSEXP);
    Rcpp::traits::input_parameter< bool >::type addSmallDiag(addSmallDiagSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type pVAR(pVARSEXP);
    rcpp_result_gen = Rcpp::wrap(PELTCpp(tsMat, penalty, minSize, jump, costFunc, addSmallDiag, epsilon, pVAR));
    return rcpp_result_gen;
END_RCPP
}
// binSegCpp
List binSegCpp(const arma::mat& tsMat, const int& minSize, const int& jump, std::string costFunc, bool addSmallDiag, double epsilon, int pVAR);
RcppExport SEXP _rupturesRcpp_binSegCpp(SEXP tsMatSEXP, SEXP minSizeSEXP, SEXP jumpSEXP, SEXP costFuncSEXP, SEXP addSmallDiagSEXP, SEXP epsilonSEXP, SEXP pVARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type tsMat(tsMatSEXP);
    Rcpp::traits::input_parameter< const int& >::type minSize(minSizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type jump(jumpSEXP);
    Rcpp::traits::input_parameter< std::string >::type costFunc(costFuncSEXP);
    Rcpp::traits::input_parameter< bool >::type addSmallDiag(addSmallDiagSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type pVAR(pVARSEXP);
    rcpp_result_gen = Rcpp::wrap(binSegCpp(tsMat, minSize, jump, costFunc, addSmallDiag, epsilon, pVAR));
    return rcpp_result_gen;
END_RCPP
}
// binSegPredCpp
IntegerVector binSegPredCpp(const IntegerVector& bkps, const NumericVector& cost, const double& penalty);
RcppExport SEXP _rupturesRcpp_binSegPredCpp(SEXP bkpsSEXP, SEXP costSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type bkps(bkpsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type cost(costSEXP);
    Rcpp::traits::input_parameter< const double& >::type penalty(penaltySEXP);
    rcpp_result_gen = Rcpp::wrap(binSegPredCpp(bkps, cost, penalty));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_CostVAR_module();

static const R_CallMethodDef CallEntries[] = {
    {"_rupturesRcpp_PELTCpp", (DL_FUNC) &_rupturesRcpp_PELTCpp, 8},
    {"_rupturesRcpp_binSegCpp", (DL_FUNC) &_rupturesRcpp_binSegCpp, 7},
    {"_rupturesRcpp_binSegPredCpp", (DL_FUNC) &_rupturesRcpp_binSegPredCpp, 3},
    {"_rcpp_module_boot_CostVAR_module", (DL_FUNC) &_rcpp_module_boot_CostVAR_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rupturesRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
