% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/binSegR6.R
\docType{class}
\name{binSeg}
\alias{binSeg}
\title{Binary Segmentation (binSeg)}
\description{
An R6 class implementing binary segmentation for offline change point detection.
}
\details{
Binary segmentation is a classic algorithm for change point detection that recursively
splits the data at locations that minimise the cost function.

Currently supported cost functions:
\itemize{
\item \code{"L2"}: for (independent) piecewise Gaussian process with \strong{constant covariance}
\item \code{"SIGMA"}: for (independent) piecewise Gaussian process with \strong{varying covariance}
\item \code{"VAR"}: for piecewise Gaussian vector-regressive process with \strong{constant covariance}
}

See \strong{Methods} and section for more details.
}
\section{Methods}{

\describe{
\item{\code{$new()}}{Initialises a binSeg object.}
\item{\code{$describe()}}{Describes the binSeg object.}
\item{\code{$fit()}}{Takes a time series matrix as input and perform binSeg for the
maximum number of change points.}
\item{\code{$predict()}}{Performs binSeg given a linear penalty value.}
\item{\code{$plot()}}{Plots change point segmentation in ggplot style.}
\item{\code{$clone()}}{Clone the binSeg object.}
}
}

\examples{
# Toy example
tsMat = as.matrix(c(rnorm(100,0), rnorm(100,0, 10)))
# Initialise a binSeg object and fit the method to tsMat
binSegObj = binSeg$new(costFunc = "SIGMA")
binSegObj$fit(tsMat) #Need to run this before running $predict()
# Perform binSeg for a specific linear penalty threshold
binSegObj$predict(pen = 50)
# Plot the latest segmentation solution
binSegObj$plot(main = "binSeg:SIGMA:pen=50", ncol = 1)
# Describe the binSeg object (and invisibly return the object's fields)
binSegObj$describe()


## ------------------------------------------------
## Method `binSeg$new`
## ------------------------------------------------

peltObj = PELT$new(minSize = 1L, jump = 1L, costFunc = "L2")

## ------------------------------------------------
## Method `binSeg$describe`
## ------------------------------------------------

binSegObj = binSeg$new(minSize = 1L, jump = 1L, costFunc = "L2")
binSegObj$describe()


## ------------------------------------------------
## Method `binSeg$fit`
## ------------------------------------------------

binSegObj = binSeg$new(minSize = 1L, jump = 1L, costFunc = "L2")
tsMat = as.matrix(c(rnorm(100,0), rnorm(100,5)))
binSegObj$fit(tsMat)

## ------------------------------------------------
## Method `binSeg$predict`
## ------------------------------------------------

binSegObj = binSeg$new(minSize = 1L, jump = 1L, costFunc = "L2")
tsMat = as.matrix(c(rnorm(100,0), rnorm(100,5)))
binSegObj$fit(tsMat)
binSegObj$predict()

## ------------------------------------------------
## Method `binSeg$plot`
## ------------------------------------------------

binSegObj = binSeg$new(minSize = 1L, jump = 1L, costFunc = "L2")
tsMat = as.matrix(c(rnorm(100,0), rnorm(100,5)))
binSegObj$fit(tsMat)
binSegObj$predict(pen = 1)
pen1 = binSegObj$plot(main = "binSeg: pen = 1")
binSegObj$predict(pen = 25)
pen25 = binSegObj$plot(main = "binSeg: pen = 25")
pen1 | pen25
}
\references{
Truong, C., Oudre, L., & Vayatis, N. (2020). Selective review of offline change point detection methods.
Signal Processing, 167, 107299.

Hocking, T. D. (2024). Finite Sample Complexity Analysis of Binary Segmentation. arXiv preprint arXiv:2410.08654.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{minSize}}{Active binding. Sets the internal variable \code{.minSize} but should not be called directly.}

\item{\code{jump}}{Active binding. Sets the internal variable \code{.jump} but should not be called directly.}

\item{\code{costFunc}}{Active binding. Sets the internal variable \code{.costFunc} but should not be called directly.}

\item{\code{tsMat}}{Active binding. Sets the internal variable \code{.tsMat} but should not be called directly.}

\item{\code{addSmallDiag}}{Active binding. Sets the internal variable \code{.addSmallDiag} but should not be called directly.}

\item{\code{epsilon}}{Active binding. Sets the internal variable \code{.epsilon} but should not be called directly.}

\item{\code{pVAR}}{Active binding. Sets the internal variable \code{.pVAR} but should not be called directly.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-binSeg-new}{\code{binSeg$new()}}
\item \href{#method-binSeg-describe}{\code{binSeg$describe()}}
\item \href{#method-binSeg-fit}{\code{binSeg$fit()}}
\item \href{#method-binSeg-predict}{\code{binSeg$predict()}}
\item \href{#method-binSeg-plot}{\code{binSeg$plot()}}
\item \href{#method-binSeg-clone}{\code{binSeg$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-binSeg-new"></a>}}
\if{latex}{\out{\hypertarget{method-binSeg-new}{}}}
\subsection{Method \code{new()}}{
Initialises a binSeg object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{binSeg$new(minSize, jump, costFunc, addSmallDiag, epsilon, pVAR)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{minSize}}{Integer. Minimum allowed segment length. Default: 1L.}

\item{\code{jump}}{Integer. Search grid step size: only positions in \{1, k+1, 2k+1, ...\} are considered. Default: 1L.}

\item{\code{costFunc}}{Character. Cost function to use: one of \code{"L2"}, \code{"SIGMA"}, or \code{"VAR"}. Default: \code{"L2"}.}

\item{\code{addSmallDiag}}{Logical. (SIGMA) If \code{TRUE}, adds a small value to the diagonal of estimated covariance matrices
to improve numerical stability. Default: \code{TRUE}.}

\item{\code{epsilon}}{Double. (SIGMA) A small positive value used to the diagonal of estimated covariance matrices to stabilise
matrix operations. Default: \code{1e-6}.}

\item{\code{pVAR}}{Integer (VAR). Order of the vector autoregressive (VAR) model. Must be non-negative. Default: \code{1L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns NULL.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{peltObj = PELT$new(minSize = 1L, jump = 1L, costFunc = "L2")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-binSeg-describe"></a>}}
\if{latex}{\out{\hypertarget{method-binSeg-describe}{}}}
\subsection{Method \code{describe()}}{
Describes a binSeg object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{binSeg$describe()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns a list containing some of the following fields:
\describe{
\item{\code{minSize}}{Minimum allowed segment length.}
\item{\code{jump}}{Search grid step size.}
\item{\code{costFunc}}{The cost function.}
\item{\code{addSmallDiag}}{(SIGMA only) Whether to add bias for numerical stability.}
\item{\code{epsilon}}{(SIGMA, VAR) Bias added to diagonal entries.}
\item{\code{pVAR}}{(VAR) VAR order.}
\item{\code{fitted}}{Whether or not \verb{$fit()} has been run.}
\item{\code{tsMat}}{Input time series matrix.}
\item{\code{n}}{Number of observations.}
\item{\code{p}}{Number of features.}
\item{\code{bkps}}{Vector of unordered breakpoint positions.}
\item{\code{cost}}{From the second element, split costs corresponding to \code{bkps}; first element is total cost without splits.}
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{binSegObj = binSeg$new(minSize = 1L, jump = 1L, costFunc = "L2")
binSegObj$describe()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-binSeg-fit"></a>}}
\if{latex}{\out{\hypertarget{method-binSeg-fit}{}}}
\subsection{Method \code{fit()}}{
Takes a time series matrix as input and perform binSeg for the
maximum number of change points.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{binSeg$fit(tsMat)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tsMat}}{Numeric matrix. A time series matrix of size \eqn{n \times p} whose rows are observations ordered in time.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Initialises \code{private$.tsMat}, \code{private$.n}, \code{private$.p}, \code{private$.bkps}, and \code{private$.cost}. Sets private$.fitted to TRUE,
enabling the use of \verb{$predict()}. Run \verb{$describe()} for detailed configurations.
}

\subsection{Returns}{
Invisibly returns NULL.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{binSegObj = binSeg$new(minSize = 1L, jump = 1L, costFunc = "L2")
tsMat = as.matrix(c(rnorm(100,0), rnorm(100,5)))
binSegObj$fit(tsMat)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-binSeg-predict"></a>}}
\if{latex}{\out{\hypertarget{method-binSeg-predict}{}}}
\subsection{Method \code{predict()}}{
Performs binSeg given a linear penalty value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{binSeg$predict(pen = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pen}}{Numeric. Penalty per change point. Default: \code{0}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Performs binSeg given a linear penalty value. Temporary end points are saved
to \code{private$.tmpEndPoints}, allowing users to use \verb{$plot()} without specifying
end points.
}

\subsection{Returns}{
An integer vector of regime end points. By design, the last element is the
number of observations.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{binSegObj = binSeg$new(minSize = 1L, jump = 1L, costFunc = "L2")
tsMat = as.matrix(c(rnorm(100,0), rnorm(100,5)))
binSegObj$fit(tsMat)
binSegObj$predict()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-binSeg-plot"></a>}}
\if{latex}{\out{\hypertarget{method-binSeg-plot}{}}}
\subsection{Method \code{plot()}}{
Plots change point segmentation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{binSeg$plot(
  d = 1L,
  endPts,
  dimNames,
  main,
  xlab,
  tsWidth = 0.25,
  tsCol = "#5B9BD5",
  bgCol = c("#A3C4F3", "#FBB1BD"),
  bgAlpha = 0.5,
  ncol = 1L
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{d}}{Integer vector. Dimensions to plot. Default: \code{1L}.}

\item{\code{endPts}}{Integer vector. End points; defaults to latest temporary changepoints from \verb{$predict()}.}

\item{\code{dimNames}}{Character vector. Feature names matching length of \code{d}. Defaults to \verb{"X1", "X2", ...}.}

\item{\code{main}}{Character. Plot main title. Defaults to \code{"binSeg: d = ..."}.}

\item{\code{xlab}}{Character. X-axis label. Default: \code{"Time"}.}

\item{\code{tsWidth}}{Numeric. Line width for time series and segments. Default: \code{0.25}.}

\item{\code{tsCol}}{Character. Time series color. Default: \code{"#5B9BD5"}.}

\item{\code{bgCol}}{Character vector. Segment colors, recycled to length of \code{endPts}. Default: \code{c("#A3C4F3", "#FBB1BD")}.}

\item{\code{bgAlpha}}{Numeric. Background transparency. Default: \code{0.5}.}

\item{\code{ncol}}{Integer. Number of columns in facet layout. Default: \code{1L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Plots change point segmentation results. Based on ggplot2. Multiple plots can easily be
horizontally and vertically stacked using patchwork's operators \code{/} and \code{|}, respectively.
}

\subsection{Returns}{
An object of classes "gg" and "ggplot".
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{binSegObj = binSeg$new(minSize = 1L, jump = 1L, costFunc = "L2")
tsMat = as.matrix(c(rnorm(100,0), rnorm(100,5)))
binSegObj$fit(tsMat)
binSegObj$predict(pen = 1)
pen1 = binSegObj$plot(main = "binSeg: pen = 1")
binSegObj$predict(pen = 25)
pen25 = binSegObj$plot(main = "binSeg: pen = 25")
pen1 | pen25
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-binSeg-clone"></a>}}
\if{latex}{\out{\hypertarget{method-binSeg-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{binSeg$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
